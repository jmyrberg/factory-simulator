# Simple factory config
# ---------------------
# - One machine, one operator, one material/consumable, multiple end products and programs
# - Simple schedule for programs and raw material procurement
# - Data collection is optimized for server usage, but depending on your goal, you have three options:
#     1) Use variables through OPC-UA (default config below)
#         - Keep monitor=1
#         - Keep collector uncommented
#         - Keep exporters -section commented out
#     2) Collect variables into CSV
#         - Keep monitor=1
#         - Keep collector uncommented
#         - Uncomment exporters -section
#     3) Keep everything in memory and plot from the object:
#         - Set monitor=-1
#         - Collector has no effect as everything is saved into a Python list
#         - Keep exporters -section commented out
#         - Access data through Factory -object properties and methods, e.g. using
#           factory.data, factory.data_df or factory.plot()
#
# To understand the possibilities better:
# - See src.simulator.parser to understand what is being parsed from here and how
# - See src.simulator.* -modules to understand the inputs
#
# The default settings should work as-is - good luck :)
id: factory
name: Factory
randomize: true
monitor: 1

materials:
  - id: material1
    name: Material1

consumables:
  - id: consumable1
    name: Consumable1

products:
  - id: product1
    name: Product1
  - id: product2
    name: Product2
  - id: product3
    name: Product3

containers:
  - id: materialcontainer1
    name: MaterialContainer(Material1)
    content: material1
    capacity: 1000
    fill-rate: 400
  - id: consumablecontainer1
    name: ConsumableContainer(Consumable1)
    content: consumable1
    capacity: 500
    fill-rate: 200
  - id: productcontainer1
    name: ProductContainer(Product1)
    content: product1

boms:
  - id: bom1
    name: BOM1
    materials:
      - id: material1
        consumption: 12
    consumables:
      - id: consumable1
        consumption: 7
    products:
      - id: product1
        quantity: 10

  - id: bom2
    name: BOM2
    materials:
      - id: material1
        consumption: 8
    consumables:
      - id: consumable1
        consumption: 5
    products:
      - id: product1
        quantity: 10

  - id: bom3
    name: BOM3
    materials:
      - id: material1
        consumption: 14
    consumables:
      - id: consumable1
        consumption: 8
    products:
      - id: product1
        quantity: 10

programs:
  - id: program1
    name: Program1
    bom: bom1
    duration-minutes: 60
    temp-factor: 1.1
  - id: program2
    name: Program2
    bom: bom2
    duration-minutes: 60
    temp-factor: 1.2
  - id: program3
    name: Program3
    bom: bom3
    duration-minutes: 60
    temp-factor: 1.4

schedules:
  - id: operating-schedule
    name: OperatingSchedule
    type: operating
    blocks:
      - name: Cron(7:30, 1)
        cron: 30 7 * * *
        duration-hours: 4
        action:
          name: switch-program
          kwargs:
            program_id: program1
      - name: Cron(12:30, 2)
        cron: 30 12 1-31/2 * *
        duration-hours: 3
        action:
          name: switch-program
          kwargs:
            program_id: program2
      - name: Cron(12:30, 3)
        cron: 30 12 2-30/2 * *
        duration-hours: 3
        action:
          name: switch-program
          kwargs:
            program_id: program3
      - name: Cron(15th at 06:00, M)
        cron: 00 06 15 * *
        duration-hours: 24
        priority: -1
        action:
          name: maintenance

  - id: procurement-schedule
    name: ProcurementSchedule
    type: default
    blocks:
      - name: Cron(Mon 6:00, material1, supplier1)
        cron: 00 6 1,14,28 * *
        duration-hours: 1
        action:
          name: procurement
          kwargs:
            content_uid: material1
            quantity: 800
            quality: [0.90, 0.1]
            consumption_factor: [1, 0.1]
            fail_proba: 0.1
      - name: Cron(Mon 5:00, material1, supplier2)
        cron: 00 5 7,21 * *
        duration-hours: 1
        action:
          name: procurement
          kwargs:
            content_uid: material1
            quantity: 800
            quality: [0.80, 0.15]
            consumption_factor: [1, 0.15]
            fail_proba: 0.15
      - name: Cron(Fri 18:00, consumable1)
        cron: 00 18 * * 4
        duration-hours: 1
        action:
          name: procurement
          kwargs:
            content_uid: consumable1
            quantity: 400
            fail_proba: 0.1

maintenance:
  - id: maintenance1
    name: Maintenance

machines:
  - id: machine1
    name: Machine
    schedule: operating-schedule
    programs: [program1, program2, program3]
    default-program: program1
    containers: [materialcontainer1, consumablecontainer1, productcontainer1]
    maintenance: maintenance1
    part-fail-freq-days: [7, 14]

operators:
  - id: operator1
    name: John
    machine: machine1

# Defines which variables are collected from the simulation
# Comment if you want to collect all variables instead
collectors:
  - id: default
    name: Variable collector
    variables:
      - id: factory.datetime
        name: Factory.Datetime
        value-map: >
          lambda x: x.strftime("%Y-%m-%d %H:%M:%S")
        dtype: String
        default: "null"
      - id: machine1.state
        name: Machine.State
        value-map: >
          lambda x: {
            "off": 0,
            "on": 1,
            "production": 2,
            "error": 3
          }.get(x, 0)
        dtype: Int64
        default: 0
      - id: machine1.production_interrupt_code
        name: Machine.ProductionInterruptCode
        value-map: "lambda x: x if x is not None else 0"
        dtype: Int64
        default: 0
      - id: machine1.error_code
        name: Machine.ErrorCode
        value-map: "lambda x: x if x is not None else 0"
        dtype: Int64
        default: 0
      - id: machine1.program
        name: Machine.Program
        value-map: >
          lambda x: {
            "program1": 1,
            "program2": 2,
            "program3": 3,
          }.get(x.uid if x is not None else None, 0)
        dtype: Int64
        default: 0
      - id: machine1-temperature-sensor.temperature
        name: Machine.Temperature
        value-map: "lambda x: round(x, 2) if x is not None else 0.00"
        dtype: Double
        default: 0.00
      - id: machine1.is_planned_operating_time
        name: Machine.IsPlannedOperatingTime
        value-map: "lambda x: int(x) if x is not None else 0"
        dtype: Int64
        default: 0
      - id: machine1.consumption_consumable1
        name: Machine.Consumable.Consumption
        value-map: "lambda x: round(x, 2) if x is not None else 0.00"
        dtype: Double
        default: 0.00
      - id: machine1.consumption_material1
        name: Machine.Material.Consumption
        value-map: "lambda x: round(x, 2) if x is not None else 0.00"
        dtype: Double
        default: 0.00
      - id: machine1.material_id_material1
        name: Machine.Material.MaterialId
        value-map: "lambda x: x if x is not None else 0"
        dtype: Int64
        default: 0
      - id: machine1.latest_batch_id_material1
        name: Machine.Material.MaterialIdString
        value-map: "lambda x: x if x is not None else 'null'"
        dtype: String
        default: "null"
      - id: productcontainer1.batches_success_quantity
        name: Product.SuccessQuantity
        value-map: "lambda x: int(round(x, 0)) if x is not None else 0"
        dtype: Int64
        default: 0
      - id: productcontainer1.batches_failed_quantity
        name: Product.FailedQuantity
        value-map: "lambda x: int(round(x, 0)) if x is not None else 0"
        dtype: Int64
        default: 0
      - id: productcontainer1.batches_last_batch_quality
        name: Product.Quality
        value-map: "lambda x: round(x, 2) if x is not None else 0.00"
        dtype: Double
        default: 0.00
      - id: consumablecontainer1.consumablecontainer1_post_level
        name: ConsumableContainer.Quantity
        value-map: "lambda x: round(x, 2) if x is not None else 0.00"
        dtype: Double
        default: 0.00
      - id: materialcontainer1.batches_quantity
        name: MaterialContainer.Quantity
        value-map: "lambda x: round(x, 2) if x is not None else 0.00"
        dtype: Double
        default: 0.00
# Uncomment if you want to save variables into a CSV file
# exporters:
#   - id: csv-exporter
#     type: csv
#     filepath: results/run.csv
#     interval-secs: 60
#     collector: default
